// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servers   Server[]
  members   Member[]
  chanels   Chanel[]
}

model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String   @db.Text
  inviteCode String   @unique
  profileId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members    Member[]
  chanels    Chanel[]

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id                     String          @id @default(uuid())
  role                   MemberRole      @default(GUEST)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  profileId              String
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId               String
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages               Message[]
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]  @relation("FirstMember")
  conversationsReceived  Conversation[]  @relation("SecondMember")

  @@index([profileId])
  @@index([serverId])
}

enum ChanelType {
  TEXT
  AUDIO
  VIDEO
}

model Chanel {
  id        String     @id @default(uuid())
  name      String
  type      ChanelType @default(TEXT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Chanel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(uuid())
  firstMemberId  String
  firstMember    Member          @relation("FirstMember", fields: [firstMemberId], references: [id], onDelete: Cascade)
  secondMemberId String
  secondMember   Member          @relation("SecondMember", fields: [secondMemberId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([firstMemberId, secondMemberId])
  @@index([secondMemberId])
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String       @db.Text
  fileUrl        String?      @db.Text
  memberId       String
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
  @@index([memberId])
}
